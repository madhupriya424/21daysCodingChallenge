https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Sorting
{
    public static void main (String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        long t = sc.nextLong();
        
        while(t-- > 0)
        {
            long n = sc.nextLong();
            long arr[] = new long[(int)n];
            
            for(long i = 0; i < n; i++)
             arr[(int)i] = sc.nextLong();
             
            System.out.println(new Solution().inversionCount(arr, n));
            
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        long low = 0;
        long high = N - 1;
        return mergeSort(arr, low, high);
    }
    
    static long mergeSort(long arr[], long low, long high) {
        
        long count = 0;
        if (low < high) {
            long mid = low + (high - low)/2;
            // System.out.println("mid: "+mid);
            count += mergeSort(arr, low, mid);
            count += mergeSort(arr, mid + 1, high);
            count += merge(arr, low, mid, high);
        }
        return count;
    }
    
    static long merge(long arr[], long low, long mid, long high) {
        int n1 = (int)(mid - low + 1);
        int n2 = (int)(high - mid);
        // System.out.println("n1: "+n1+" n2: "+n2);
        
        long left[] = new long[n1];
        long right[] = new long[n2];
        
        for (int i = 0; i < n1; i++) {
            left[i] = arr[(int)low + i];
        }
        
        for (int j = 0; j < n2; j++) {
            right[j] = arr[(int)mid + 1 + j];
        }
        
        int i = 0, j = 0, k = (int)low;
        long count = 0;
        
        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++]; 
            } else {
                arr[k++] = right[j++];
                count += (mid + 1) - (low + i);
            }
        }
        
        while (i < n1) {
            arr[k++] = left[i++];
        }
        
        while (j < n2) {
            arr[k++] = right[j++];
        }
        
        return count;
    }
}
